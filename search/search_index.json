{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to the Kreato Linux documentation. Contents Currently the documentation is focused on the Handbook, but other documentation will be available in due time. Theres also the history of the distribution, if you want to know.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the Kreato Linux documentation.","title":"Welcome"},{"location":"#contents","text":"Currently the documentation is focused on the Handbook, but other documentation will be available in due time. Theres also the history of the distribution, if you want to know.","title":"Contents"},{"location":"history/","text":"History Kreato Linux was started in 2022, mainly because i was fed up with other Linux distributions. It had a POSIX sh base (nyaa, the package manager was written in POSIX sh) with a bit of C at the start (nyaa-src was built in C, which was for building the rootfs). I killed out nyaa-src pretty quick because of it not utilizing the package manager nyaa, which was a big issue. The another reason was the code being a mess, and was full of shell commands anyway. It was good for a first try atleast, it gave me something that was working. I replaced nyaa-src with nyaastrap, which was written in POSIX sh just like the package manager and was actually utilizing it. It was pretty buggy and never worked right but atleast was better than nyaa-src. This was also the time when i packaged the entirety of sway (and its dependencies) and booted it up in real hardware. Was the quite sight to see a year of work finally showing progress. But change was swift after that. I was fed up with the issues of nyaa (now called nyaa2) like unreadable code in a lot of areas, slow performance, minimalism not being possible in the project without a massive refactor and not great error handling. Nyaastrap being not great wasnt helping either. That was the time when i replaced nyaa with a rewrite in Nim, a programming language i was quite familiar with since i worked with it for a while. I made a test suite and rewrote nyaastrap too. And thats what we are at now. It's going well so far. I hope it continues this way.","title":"History"},{"location":"history/#history","text":"Kreato Linux was started in 2022, mainly because i was fed up with other Linux distributions. It had a POSIX sh base (nyaa, the package manager was written in POSIX sh) with a bit of C at the start (nyaa-src was built in C, which was for building the rootfs). I killed out nyaa-src pretty quick because of it not utilizing the package manager nyaa, which was a big issue. The another reason was the code being a mess, and was full of shell commands anyway. It was good for a first try atleast, it gave me something that was working. I replaced nyaa-src with nyaastrap, which was written in POSIX sh just like the package manager and was actually utilizing it. It was pretty buggy and never worked right but atleast was better than nyaa-src. This was also the time when i packaged the entirety of sway (and its dependencies) and booted it up in real hardware. Was the quite sight to see a year of work finally showing progress. But change was swift after that. I was fed up with the issues of nyaa (now called nyaa2) like unreadable code in a lot of areas, slow performance, minimalism not being possible in the project without a massive refactor and not great error handling. Nyaastrap being not great wasnt helping either. That was the time when i replaced nyaa with a rewrite in Nim, a programming language i was quite familiar with since i worked with it for a while. I made a test suite and rewrote nyaastrap too. And thats what we are at now. It's going well so far. I hope it continues this way.","title":"History"},{"location":"kreaiso/","text":"Kreaiso Kreaiso is Kreato Linux's image generator. It currently only works on images using systemd. How it simply works It works by untarring the rootfs tarball the user chooses and putting it into a SquashFS image. Then it packages a initramfs and a kernel and makes it an ISO using grub2-mkrescue . Very simple, I know. Open for suggestions. Usage Kreaiso is currently only usable through CI, but a docker-compose configuration is coming soon. DO NOT run kreaiso without a container Roadmap Next thing to do will be supporting non-systemd images, polishing the experience, etc. This project is very new so bugs are expected.","title":"Kreaiso"},{"location":"kreaiso/#kreaiso","text":"Kreaiso is Kreato Linux's image generator. It currently only works on images using systemd.","title":"Kreaiso"},{"location":"kreaiso/#how-it-simply-works","text":"It works by untarring the rootfs tarball the user chooses and putting it into a SquashFS image. Then it packages a initramfs and a kernel and makes it an ISO using grub2-mkrescue . Very simple, I know. Open for suggestions.","title":"How it simply works"},{"location":"kreaiso/#usage","text":"Kreaiso is currently only usable through CI, but a docker-compose configuration is coming soon. DO NOT run kreaiso without a container","title":"Usage"},{"location":"kreaiso/#roadmap","text":"Next thing to do will be supporting non-systemd images, polishing the experience, etc. This project is very new so bugs are expected.","title":"Roadmap"},{"location":"kreato-release/","text":"kreato-release file kreato-release is a release file on /etc . It is like os-release in functionality. It allows any software to see how the Kreato Linux system is configured. It uses an ini-like format , like kpkg/kreastrap configuration files. Example [General] dateBuilt = 2023-05-15 klinuxVersion = rolling srcCommit = 4691104 [Core] libc = glibc compiler = gcc coreutils = busybox tlsLibrary = openssl init = jumpstart [Extras] extraPackages = nim llvm mesa Options General dateBuilt: Shows the date the system has been built. Follows YYYY-MM-DD format. klinuxVersion: Shows Kreato Linux version the system is meant to run. rolling by default. srcCommit: Shows Kreato Linux source tree commit the system has been built with. Does not include kpkg included in the system. Core/Extras Core and Extras parts are almost exactly the same as kreastrap configuration files, look at kreastrap.conf(5) for information on those areas. Kreastrap will generate this file at the time the rootfs is built.","title":"kreato-release file"},{"location":"kreato-release/#kreato-release-file","text":"kreato-release is a release file on /etc . It is like os-release in functionality. It allows any software to see how the Kreato Linux system is configured. It uses an ini-like format , like kpkg/kreastrap configuration files.","title":"kreato-release file"},{"location":"kreato-release/#example","text":"[General] dateBuilt = 2023-05-15 klinuxVersion = rolling srcCommit = 4691104 [Core] libc = glibc compiler = gcc coreutils = busybox tlsLibrary = openssl init = jumpstart [Extras] extraPackages = nim llvm mesa","title":"Example"},{"location":"kreato-release/#options","text":"","title":"Options"},{"location":"kreato-release/#general","text":"dateBuilt: Shows the date the system has been built. Follows YYYY-MM-DD format. klinuxVersion: Shows Kreato Linux version the system is meant to run. rolling by default. srcCommit: Shows Kreato Linux source tree commit the system has been built with. Does not include kpkg included in the system.","title":"General"},{"location":"kreato-release/#coreextras","text":"Core and Extras parts are almost exactly the same as kreastrap configuration files, look at kreastrap.conf(5) for information on those areas. Kreastrap will generate this file at the time the rootfs is built.","title":"Core/Extras"},{"location":"WIP/","text":"Welcome This part of the wiki is features that aren't yet implemented, but considered. Some of them might be just random ideas that will never be implemented. Suggestions are welcome.","title":"Welcome"},{"location":"WIP/#welcome","text":"This part of the wiki is features that aren't yet implemented, but considered. Some of them might be just random ideas that will never be implemented. Suggestions are welcome.","title":"Welcome"},{"location":"handbook/","text":"Welcome This handbook will guide you through your journey, and teach you; What is Kreato Linux and what is it for, Advantages of going with Kreato Linux, How to install Kreato Linux, How to contribute to Kreato Linux And a lot more. Continue in What is Kreato Linux?","title":"Welcome"},{"location":"handbook/#welcome","text":"This handbook will guide you through your journey, and teach you; What is Kreato Linux and what is it for, Advantages of going with Kreato Linux, How to install Kreato Linux, How to contribute to Kreato Linux And a lot more. Continue in What is Kreato Linux?","title":"Welcome"},{"location":"handbook/installation/","text":"Installation Introduction Welcome to Kreato Linux installation guide! Note It is assumed that you have a partition layout already setup. It is also assumed that you are using a UEFI system. Kreato Linux doesn't have a live ISO image. It is assumed that you would start the installation from another Linux installation. If you do not have a working Linux install, we recommend Arch Linux LiveISO for installation. Here be dragons! Keep in mind that Kreato Linux is in ALPHA stage and will have issues. If you want a more polished experience, please wait until it is announced to be stable. By continuing to install and use Kreato Linux, you agree that you have a good understanding of Linux systems. Any basic issues/anything not related to Kreato Linux will be closed without warning. Get rootfs tarball First step should be to get the rootfs tarball. Kreato Linux installs through a rootfs (Like Gentoo). You can get the latest nightly through Github Actions . Choosing the right tarball Kreato Linux is a modular distribution. There are four build types currently available. nocc-rootfs builder-rootfs builder-gnu-rootfs and builder-systemd-rootfs. nocc-rootfs is completely built by GitHub Actions and as the name implies, doesnt have any compilers by default. You can use binaries to install any compilers, or dont build at all and use the system with just binaries. builder-rootfs is also built by GitHub actions and comes with gcc. builder-gnu-rootfs is just builder-rootfs with GNU coreutils, this is for building problematic packages with Busybox such as systemd. builder-systemd-rootfs is builder-gnu-rootfs but uses systemd instead of Jumpstart. Extracting Mount the partition you are gonna install it to /mnt . Once downloaded, extract the zip file and you will get a tarball. Extract the tarball using the command here; tar --same-owner -xvf kreato-linux-*.tar.gz -C /mnt Once extracted, we can move on to chrooting. Chrooting Before chrooting, mount your EFI partition to /boot . Run these commands to chroot. mount -o bind /dev /mnt/dev mount -t proc none /mnt/proc mount -o bind /sys /mnt/sys mount -o bind /tmp /mnt/tmp chroot /mnt /bin/bash . /etc/profile And you should be in! Installing base system packages Binary vs. Source Kreato Linux offers 2 choices for installation. Source based (compiling software), And binary based (installing from binary repository). Both choices have their own advantages. Advantages and disadvantages of building packages Updates come faster. Has more customizability and optimization options. Building is slower than downloading a binary tarball. Advantages and disadvantages of binary packages Updates are available with a lag. Has less customizability. Doesn't require building packages, making it more suitable to older/less powerful systems. Is not currently stable, packages may not even exist on the mirror. This installation guide will assume that you are gonna install binary packages ( kpkg install packagename ). If you want to build packages, please change kpkg install to kpkg build so it builds the packages instead of installing the binary. Stable repositories vs master Kreato Linux has 2 branches in official repositories named master and stable . As the name implies, stable is the stable branch. master is the unstable branch. Advantages and disadvantages of stable Packages that are added in stable are usually well-tested and ready for production. Packages may be out of date compared to the master branch. Most recent additions wont be there, atleast until they are considered well-tested. Is the default repository. Advantages and disadvantages of master. It is cutting edge, it will get the updates first. Packages may be for a more recent, unreleased version of kpkg . Most recent additions and improvements will be there. Is not the default unless you build kpkg manually. Kreato Linux is mostly focused on the master branch for now, but we try to keep stable recent enough. You can switch to the branches by editing repoLinks on /etc/kpkg/kpkg.conf . If the file doesn't exist, run kpkg since it'll generate the files for you. Now we can continue with installing base system packages. Installing the init system Kreato Linux includes multiple init systems. systemd, OpenRC and Jumpstart exist as a option. Jumpstart is the default and recommended option. If you want systemd; you can install systemd : kpkg install systemd . Systemd also comes by default in builder-systemd-rootfs. If you want OpenRC: you can install openrc : kpkg install openrc If you want Jumpstart, it is installed by default on every rootfs except builder-systemd-rootfs Installing networking tools dhcpcd is recommended. run kpkg install dhcpcd to install dhcpcd . You should install wpa_supplicant aswell if you need Wi-Fi connectivity. run kpkg install wpa_supplicant to install it. Installing the kernel You can either build your own kernel or use Kreato Linux's kernel, that uses Gentoo's kernel configuration. It is recommended to build your own kernel, since it will be much more minimal and will compile faster (if you are building the package). You can run kpkg install linux to install the prebuilt kernel. As for building your own kernel, you can check out This video . Building the initramfs You can use either dracut , which doesn't work on Busybox systems at the moment, or booster . Both are valid options and both are tested. Keep in mind that dracut has been only tested on systems using systemd, your mileage may vary. Installing the bootloader Kreato Linux offers multiple bootloaders. You can use Limine or Grub. Grub is the most tested option. You can install Grub by running kpkg install grub . You can then install it to /boot like so; grub-install --target=x86_64-efi --efi-directory=/boot Then generate the config; grub-mkconfig -o /boot/grub/grub.cfg As for Limine, you can install it by running kpkg install limine . Configuration is already explained greatly on Arch Wiki , so i wont repeat it here. Change the root password You should change the root password by running this command; passwd root If you want to do so, you can also add additional users with useradd . Now you should be able to boot Kreato Linux by itself. Setting up the locale You can set up the locale by running these commands. Change LOCALE=en_US with your language (Example; LOCALE=de_DE for German) LOCALE=en_US mkdir -p /usr/lib/locale localedef -i $LOCALE -c -f UTF-8 $LOCALE echo \"export LANG=$LOCALE.UTF-8\" >> /etc/profile Install Flatpak As the repositories are very tiny, you may need Flatpak to get packages. Install Flatpak; kpkg install flatpak Then you can get apps from Flathub by running; flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo Installing a Window Manager Kreato Linux only offers sway for now. You can install sway by running kpkg install sway . More Wayland window managers are coming soon. You can also install foot, a terminal by running kpkg install foot Installing Desktop Environments Kreato Linux only offers GNOME for now in terms of desktop environments. GNOME Install it by running kpkg install gnome . You can then enable and start GDM as a display manager by running jumpctl enable gdm --now or systemctl enable gdm --now . You can also start GNOME manually by running XDG_SESSION_TYPE=wayland dbus-run-session gnome-session . What's Next You can tinker with your setup, install additional software, package something, etc. If you want to contribute to Kreato Linux, you can look at the Contribution Guide .","title":"Installation"},{"location":"handbook/installation/#installation","text":"","title":"Installation"},{"location":"handbook/installation/#introduction","text":"Welcome to Kreato Linux installation guide! Note It is assumed that you have a partition layout already setup. It is also assumed that you are using a UEFI system. Kreato Linux doesn't have a live ISO image. It is assumed that you would start the installation from another Linux installation. If you do not have a working Linux install, we recommend Arch Linux LiveISO for installation. Here be dragons! Keep in mind that Kreato Linux is in ALPHA stage and will have issues. If you want a more polished experience, please wait until it is announced to be stable. By continuing to install and use Kreato Linux, you agree that you have a good understanding of Linux systems. Any basic issues/anything not related to Kreato Linux will be closed without warning.","title":"Introduction"},{"location":"handbook/installation/#get-rootfs-tarball","text":"First step should be to get the rootfs tarball. Kreato Linux installs through a rootfs (Like Gentoo). You can get the latest nightly through Github Actions .","title":"Get rootfs tarball"},{"location":"handbook/installation/#choosing-the-right-tarball","text":"Kreato Linux is a modular distribution. There are four build types currently available. nocc-rootfs builder-rootfs builder-gnu-rootfs and builder-systemd-rootfs. nocc-rootfs is completely built by GitHub Actions and as the name implies, doesnt have any compilers by default. You can use binaries to install any compilers, or dont build at all and use the system with just binaries. builder-rootfs is also built by GitHub actions and comes with gcc. builder-gnu-rootfs is just builder-rootfs with GNU coreutils, this is for building problematic packages with Busybox such as systemd. builder-systemd-rootfs is builder-gnu-rootfs but uses systemd instead of Jumpstart.","title":"Choosing the right tarball"},{"location":"handbook/installation/#extracting","text":"Mount the partition you are gonna install it to /mnt . Once downloaded, extract the zip file and you will get a tarball. Extract the tarball using the command here; tar --same-owner -xvf kreato-linux-*.tar.gz -C /mnt Once extracted, we can move on to chrooting.","title":"Extracting"},{"location":"handbook/installation/#chrooting","text":"Before chrooting, mount your EFI partition to /boot . Run these commands to chroot. mount -o bind /dev /mnt/dev mount -t proc none /mnt/proc mount -o bind /sys /mnt/sys mount -o bind /tmp /mnt/tmp chroot /mnt /bin/bash . /etc/profile And you should be in!","title":"Chrooting"},{"location":"handbook/installation/#installing-base-system-packages","text":"","title":"Installing base system packages"},{"location":"handbook/installation/#binary-vs-source","text":"Kreato Linux offers 2 choices for installation. Source based (compiling software), And binary based (installing from binary repository). Both choices have their own advantages.","title":"Binary vs. Source"},{"location":"handbook/installation/#advantages-and-disadvantages-of-building-packages","text":"Updates come faster. Has more customizability and optimization options. Building is slower than downloading a binary tarball.","title":"Advantages and disadvantages of building packages"},{"location":"handbook/installation/#advantages-and-disadvantages-of-binary-packages","text":"Updates are available with a lag. Has less customizability. Doesn't require building packages, making it more suitable to older/less powerful systems. Is not currently stable, packages may not even exist on the mirror. This installation guide will assume that you are gonna install binary packages ( kpkg install packagename ). If you want to build packages, please change kpkg install to kpkg build so it builds the packages instead of installing the binary.","title":"Advantages and disadvantages of binary packages"},{"location":"handbook/installation/#stable-repositories-vs-master","text":"Kreato Linux has 2 branches in official repositories named master and stable . As the name implies, stable is the stable branch. master is the unstable branch.","title":"Stable repositories vs master"},{"location":"handbook/installation/#advantages-and-disadvantages-of-stable","text":"Packages that are added in stable are usually well-tested and ready for production. Packages may be out of date compared to the master branch. Most recent additions wont be there, atleast until they are considered well-tested. Is the default repository.","title":"Advantages and disadvantages of stable"},{"location":"handbook/installation/#advantages-and-disadvantages-of-master","text":"It is cutting edge, it will get the updates first. Packages may be for a more recent, unreleased version of kpkg . Most recent additions and improvements will be there. Is not the default unless you build kpkg manually. Kreato Linux is mostly focused on the master branch for now, but we try to keep stable recent enough. You can switch to the branches by editing repoLinks on /etc/kpkg/kpkg.conf . If the file doesn't exist, run kpkg since it'll generate the files for you. Now we can continue with installing base system packages.","title":"Advantages and disadvantages of master."},{"location":"handbook/installation/#installing-the-init-system","text":"Kreato Linux includes multiple init systems. systemd, OpenRC and Jumpstart exist as a option. Jumpstart is the default and recommended option. If you want systemd; you can install systemd : kpkg install systemd . Systemd also comes by default in builder-systemd-rootfs. If you want OpenRC: you can install openrc : kpkg install openrc If you want Jumpstart, it is installed by default on every rootfs except builder-systemd-rootfs","title":"Installing the init system"},{"location":"handbook/installation/#installing-networking-tools","text":"dhcpcd is recommended. run kpkg install dhcpcd to install dhcpcd . You should install wpa_supplicant aswell if you need Wi-Fi connectivity. run kpkg install wpa_supplicant to install it.","title":"Installing networking tools"},{"location":"handbook/installation/#installing-the-kernel","text":"You can either build your own kernel or use Kreato Linux's kernel, that uses Gentoo's kernel configuration. It is recommended to build your own kernel, since it will be much more minimal and will compile faster (if you are building the package). You can run kpkg install linux to install the prebuilt kernel. As for building your own kernel, you can check out This video .","title":"Installing the kernel"},{"location":"handbook/installation/#building-the-initramfs","text":"You can use either dracut , which doesn't work on Busybox systems at the moment, or booster . Both are valid options and both are tested. Keep in mind that dracut has been only tested on systems using systemd, your mileage may vary.","title":"Building the initramfs"},{"location":"handbook/installation/#installing-the-bootloader","text":"Kreato Linux offers multiple bootloaders. You can use Limine or Grub. Grub is the most tested option. You can install Grub by running kpkg install grub . You can then install it to /boot like so; grub-install --target=x86_64-efi --efi-directory=/boot Then generate the config; grub-mkconfig -o /boot/grub/grub.cfg As for Limine, you can install it by running kpkg install limine . Configuration is already explained greatly on Arch Wiki , so i wont repeat it here.","title":"Installing the bootloader"},{"location":"handbook/installation/#change-the-root-password","text":"You should change the root password by running this command; passwd root If you want to do so, you can also add additional users with useradd . Now you should be able to boot Kreato Linux by itself.","title":"Change the root password"},{"location":"handbook/installation/#setting-up-the-locale","text":"You can set up the locale by running these commands. Change LOCALE=en_US with your language (Example; LOCALE=de_DE for German) LOCALE=en_US mkdir -p /usr/lib/locale localedef -i $LOCALE -c -f UTF-8 $LOCALE echo \"export LANG=$LOCALE.UTF-8\" >> /etc/profile","title":"Setting up the locale"},{"location":"handbook/installation/#install-flatpak","text":"As the repositories are very tiny, you may need Flatpak to get packages. Install Flatpak; kpkg install flatpak Then you can get apps from Flathub by running; flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo","title":"Install Flatpak"},{"location":"handbook/installation/#installing-a-window-manager","text":"Kreato Linux only offers sway for now. You can install sway by running kpkg install sway . More Wayland window managers are coming soon. You can also install foot, a terminal by running kpkg install foot","title":"Installing a Window Manager"},{"location":"handbook/installation/#installing-desktop-environments","text":"Kreato Linux only offers GNOME for now in terms of desktop environments.","title":"Installing Desktop Environments"},{"location":"handbook/installation/#gnome","text":"Install it by running kpkg install gnome . You can then enable and start GDM as a display manager by running jumpctl enable gdm --now or systemctl enable gdm --now . You can also start GNOME manually by running XDG_SESSION_TYPE=wayland dbus-run-session gnome-session .","title":"GNOME"},{"location":"handbook/installation/#whats-next","text":"You can tinker with your setup, install additional software, package something, etc. If you want to contribute to Kreato Linux, you can look at the Contribution Guide .","title":"What's Next"},{"location":"handbook/what-is-kreato-linux/","text":"What is Kreato Linux? Kreato Linux is an independent Linux distribution focused on these core aspects; Modularity Code readability Minimalism Advantages A minimal base with the modularity that can match LFS (Linux from Scratch), while having an central repository among other things. Kreato Linux was made with modularity in mind. It is meant to be the tinkerers distribution. Why? This is answered in the History section.","title":"What is Kreato Linux?"},{"location":"handbook/what-is-kreato-linux/#what-is-kreato-linux","text":"Kreato Linux is an independent Linux distribution focused on these core aspects; Modularity Code readability Minimalism","title":"What is Kreato Linux?"},{"location":"handbook/what-is-kreato-linux/#advantages","text":"A minimal base with the modularity that can match LFS (Linux from Scratch), while having an central repository among other things. Kreato Linux was made with modularity in mind. It is meant to be the tinkerers distribution.","title":"Advantages"},{"location":"handbook/what-is-kreato-linux/#why","text":"This is answered in the History section.","title":"Why?"},{"location":"handbook/contributing/","text":"Welcome Welcome to the contribution guide! In here you will learn; The internal structure of the source tree, How other projects inside the source tree work, And how to build an rootfs to test your changes! We recommend you check out The manpages for more detailed and up-to-date information.","title":"Welcome"},{"location":"handbook/contributing/#welcome","text":"Welcome to the contribution guide! In here you will learn; The internal structure of the source tree, How other projects inside the source tree work, And how to build an rootfs to test your changes! We recommend you check out The manpages for more detailed and up-to-date information.","title":"Welcome"},{"location":"handbook/contributing/how-to-rootfs/","text":"How to build an rootfs This tutorial will teach you how to build an rootfs. Dependencies Docker/podman and docker/podman-compose Nim with Nimble Make (preferably GNU make, others are untested) Git Steps Downloading the source tree You can clone the source code with git clone https://github.com/kreatolinux/src . If you want, you can also use an stable release off GitHub Releases. Use kreastrap To run kreastrap, you just do docker compose up builder . Change docker compose with podman-compose if you are using podman-compose. Once finished, your rootfs will be available at ./out . It builds builder-rootfs by default (See what build types are)","title":"How to build an rootfs"},{"location":"handbook/contributing/how-to-rootfs/#how-to-build-an-rootfs","text":"This tutorial will teach you how to build an rootfs.","title":"How to build an rootfs"},{"location":"handbook/contributing/how-to-rootfs/#dependencies","text":"Docker/podman and docker/podman-compose Nim with Nimble Make (preferably GNU make, others are untested) Git","title":"Dependencies"},{"location":"handbook/contributing/how-to-rootfs/#steps","text":"","title":"Steps"},{"location":"handbook/contributing/how-to-rootfs/#downloading-the-source-tree","text":"You can clone the source code with git clone https://github.com/kreatolinux/src . If you want, you can also use an stable release off GitHub Releases.","title":"Downloading the source tree"},{"location":"handbook/contributing/how-to-rootfs/#use-kreastrap","text":"To run kreastrap, you just do docker compose up builder . Change docker compose with podman-compose if you are using podman-compose. Once finished, your rootfs will be available at ./out . It builds builder-rootfs by default (See what build types are)","title":"Use kreastrap"},{"location":"handbook/contributing/jumpstart-internal-documentation/","text":"JumpStart internal documentation Communication Communication happens through UNIX sockets. /run/jumpstart.lock is the default socket path. Interacting with services The client sends these information onto the socket. { \"client\" : { \"name\" : \"Jumpstart CLI\" , \"version\" : \"0.0.1-alpha\" }, \"service\" : { \"name\" : \"test.service\" , \"action\" : \"enable\" , \"now\" : \"false\" } } Change the action to whatever you want. If it is supported within Jumpstart, you should see an reply. Unsupported operations are ignored. Checking the status of services Service status is sent through /run/serviceHandler/serviceName.service/status . serviceHandler serviceHandler is the service handler of JumpStart. It manages services. Services Services are parsed using std/parsecfg, which is like ini. Services are stored in /etc/jumpstart/services by default and have the .service extension. [Info] Desc = \"This is a test service.\" Type = \"service\" # Specify type, 'service' is for services, 'mount' is for mounting [Service] execPre = \"echo 'This will be ran before Exec'\" exec = \"echo 'this is a test'\" execPost = \"echo 'This will be ran after the initial command'\" Enabled services are stored in /etc/jumpstart/services/enabled . Mounts Mounts are also parsed using std/parsecfg, which is like ini. They are stored in /etc/jumpstart/mounts and have the .mount extension. [Info] Desc = \"This is an test mount.\" Type = \"mount\" [Mount] From = \"/dev/nvme0n1p1\" To = \"/mnt\" Type = \"ext4\" Timeout = \"5s\" lazyUmount = \"true\" Chmod = \"755\" extraArgs = \"--bind\" Jumpstart configuration Jumpstart has a config file in /etc/jumpstart/main.conf . It has an ini-like format. [Startup] emergencyShell = \"yes\" debugLogs = \"yes\" [System] hostname = \"klinux\" Using another service manager Jumpstart is designed to be modular, and allows using other service managers. Using other service managers means Jumpstart will just be an middleman between the service manager (eg. runit ) and the user. This way no backwards compatibility is lost, and user choice is retained. This is coming soon. Jumpstart FAQ Why? Because i need a simple and stable init system/service manager for Kreato Linux. How is this better than other init system/service managers like systemd, runit, openrc etc. It isnt and it doesnt try to be. Jumpstart is meant for use with Kreato Linux and is designed for that purpose.","title":"JumpStart internal documentation"},{"location":"handbook/contributing/jumpstart-internal-documentation/#jumpstart-internal-documentation","text":"","title":"JumpStart internal documentation"},{"location":"handbook/contributing/jumpstart-internal-documentation/#communication","text":"Communication happens through UNIX sockets. /run/jumpstart.lock is the default socket path.","title":"Communication"},{"location":"handbook/contributing/jumpstart-internal-documentation/#interacting-with-services","text":"The client sends these information onto the socket. { \"client\" : { \"name\" : \"Jumpstart CLI\" , \"version\" : \"0.0.1-alpha\" }, \"service\" : { \"name\" : \"test.service\" , \"action\" : \"enable\" , \"now\" : \"false\" } } Change the action to whatever you want. If it is supported within Jumpstart, you should see an reply. Unsupported operations are ignored.","title":"Interacting with services"},{"location":"handbook/contributing/jumpstart-internal-documentation/#checking-the-status-of-services","text":"Service status is sent through /run/serviceHandler/serviceName.service/status .","title":"Checking the status of services"},{"location":"handbook/contributing/jumpstart-internal-documentation/#servicehandler","text":"serviceHandler is the service handler of JumpStart. It manages services.","title":"serviceHandler"},{"location":"handbook/contributing/jumpstart-internal-documentation/#services","text":"Services are parsed using std/parsecfg, which is like ini. Services are stored in /etc/jumpstart/services by default and have the .service extension. [Info] Desc = \"This is a test service.\" Type = \"service\" # Specify type, 'service' is for services, 'mount' is for mounting [Service] execPre = \"echo 'This will be ran before Exec'\" exec = \"echo 'this is a test'\" execPost = \"echo 'This will be ran after the initial command'\" Enabled services are stored in /etc/jumpstart/services/enabled .","title":"Services"},{"location":"handbook/contributing/jumpstart-internal-documentation/#mounts","text":"Mounts are also parsed using std/parsecfg, which is like ini. They are stored in /etc/jumpstart/mounts and have the .mount extension. [Info] Desc = \"This is an test mount.\" Type = \"mount\" [Mount] From = \"/dev/nvme0n1p1\" To = \"/mnt\" Type = \"ext4\" Timeout = \"5s\" lazyUmount = \"true\" Chmod = \"755\" extraArgs = \"--bind\"","title":"Mounts"},{"location":"handbook/contributing/jumpstart-internal-documentation/#jumpstart-configuration","text":"Jumpstart has a config file in /etc/jumpstart/main.conf . It has an ini-like format. [Startup] emergencyShell = \"yes\" debugLogs = \"yes\" [System] hostname = \"klinux\"","title":"Jumpstart configuration"},{"location":"handbook/contributing/jumpstart-internal-documentation/#using-another-service-manager","text":"Jumpstart is designed to be modular, and allows using other service managers. Using other service managers means Jumpstart will just be an middleman between the service manager (eg. runit ) and the user. This way no backwards compatibility is lost, and user choice is retained. This is coming soon.","title":"Using another service manager"},{"location":"handbook/contributing/jumpstart-internal-documentation/#jumpstart-faq","text":"","title":"Jumpstart FAQ"},{"location":"handbook/contributing/jumpstart-internal-documentation/#why","text":"Because i need a simple and stable init system/service manager for Kreato Linux.","title":"Why?"},{"location":"handbook/contributing/jumpstart-internal-documentation/#how-is-this-better-than-other-init-systemservice-managers-like-systemd-runit-openrc-etc","text":"It isnt and it doesnt try to be. Jumpstart is meant for use with Kreato Linux and is designed for that purpose.","title":"How is this better than other init system/service managers like systemd, runit, openrc etc."},{"location":"handbook/contributing/src/","text":"Source tree Internals Welcome! In this page you will find information as how kpkg works. What is kpkg? kpkg is the rewrite of the package manager called nyaa2 in Nim. It was originally called nyaa3. This has been done for many reasons, which i won't repeat here. Nyaa2 has more features in some areas, but is now unsupported and shouldn't be used. Layout of the source tree The layout of the project is really simple to understand. Makefile allows you to install dependencies and build the project. docker-compose.yml is there for testing. man directory has the pandoc-generated manpages, which have their source files in src/man . nix directory contains nix build support. Please keep in mind that NixOS is a completely seperate project, we just have it as a build tool option. The src directory src directory has many projects, including (currently) purr for testing, kreastrap for building packages and rootfs automatically, kpkg for package management, chkupd for version checking and mari for the binary repository. kreastrap src/kreastrap has the source code of kreastrap. Kreastrap v3 is the newest rewite the Kreato Linux build tool. It is rewritten in Nim, so it can utilize kpkg's internal functions and have better error handling than nyaastrap v2. It allows you to build packages, and an rootfs. More features may come soon. You can learn how to build an rootfs through here . purr src/purr has the source code of purr. Purr is an test utility, checking if things are still working the way they should. Please note that both of these projects should be ran on an Docker container, which is why docker-compose.yml exists. DO NOT run these tests in your host machine, as it will probably break your host system and/or not work at all. chkupd src/chkupd has the source code for chkupd v3, a Nim rewrite of chkupd v2. It allows to maintain repositories easier by checking versions off Repology API and updating accordingly. mari src/mari has the source code for mari, a extremely simple HTTP server that uses the awesome httpbeast library. It is only for Kreato Linux binary repository. kpkg The biggest project in the source tree which includes an easy-to-use library to use for other projects. It resides mostly in src/kpkg and is neatly seperated onto seperate files. src/kpkg/modules includes more internal functions such as the downloader, the config system, etc.","title":"Source tree Internals"},{"location":"handbook/contributing/src/#source-tree-internals","text":"Welcome! In this page you will find information as how kpkg works.","title":"Source tree Internals"},{"location":"handbook/contributing/src/#what-is-kpkg","text":"kpkg is the rewrite of the package manager called nyaa2 in Nim. It was originally called nyaa3. This has been done for many reasons, which i won't repeat here. Nyaa2 has more features in some areas, but is now unsupported and shouldn't be used.","title":"What is kpkg?"},{"location":"handbook/contributing/src/#layout-of-the-source-tree","text":"The layout of the project is really simple to understand. Makefile allows you to install dependencies and build the project. docker-compose.yml is there for testing. man directory has the pandoc-generated manpages, which have their source files in src/man . nix directory contains nix build support. Please keep in mind that NixOS is a completely seperate project, we just have it as a build tool option.","title":"Layout of the source tree"},{"location":"handbook/contributing/src/#the-src-directory","text":"src directory has many projects, including (currently) purr for testing, kreastrap for building packages and rootfs automatically, kpkg for package management, chkupd for version checking and mari for the binary repository.","title":"The src directory"},{"location":"handbook/contributing/src/#kreastrap","text":"src/kreastrap has the source code of kreastrap. Kreastrap v3 is the newest rewite the Kreato Linux build tool. It is rewritten in Nim, so it can utilize kpkg's internal functions and have better error handling than nyaastrap v2. It allows you to build packages, and an rootfs. More features may come soon. You can learn how to build an rootfs through here .","title":"kreastrap"},{"location":"handbook/contributing/src/#purr","text":"src/purr has the source code of purr. Purr is an test utility, checking if things are still working the way they should. Please note that both of these projects should be ran on an Docker container, which is why docker-compose.yml exists. DO NOT run these tests in your host machine, as it will probably break your host system and/or not work at all.","title":"purr"},{"location":"handbook/contributing/src/#chkupd","text":"src/chkupd has the source code for chkupd v3, a Nim rewrite of chkupd v2. It allows to maintain repositories easier by checking versions off Repology API and updating accordingly.","title":"chkupd"},{"location":"handbook/contributing/src/#mari","text":"src/mari has the source code for mari, a extremely simple HTTP server that uses the awesome httpbeast library. It is only for Kreato Linux binary repository.","title":"mari"},{"location":"handbook/contributing/src/#kpkg","text":"The biggest project in the source tree which includes an easy-to-use library to use for other projects. It resides mostly in src/kpkg and is neatly seperated onto seperate files. src/kpkg/modules includes more internal functions such as the downloader, the config system, etc.","title":"kpkg"}]}